# -*- coding: utf-8 -*-
"""K-Means Clustering Data Mining 1301174401.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vAbJ69NnLLWECDqerVxrcd-3fa4y4yoQ

Import packages
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Data"""

df = pd.read_csv('https://raw.githubusercontent.com/machine-learning-course/syllabus/gh-pages/hiw-2019b/dataset-students-ml-2019b.csv')

np.random.seed(200)
k = 3
centroids = {
    i+1:[np.random.randint(140,200), np.random.randint(20,140)]
    for i in range(k)
}

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['height'],df['weight'], color = 'k')
colmap = {1: 'r', 2: 'g', 3:'b'}
for i in centroids.keys():
  plt.scatter(*centroids[i], color = colmap[i])
plt.xlim(140,200)
plt.ylim(20,140)
plt.show()

"""Assignment Stage"""

def assignment(df, centroids):
  for i in centroids.keys():
    df['jarak_dari_{}'.format(i)] = (
        np.sqrt((df['height'] - centroids[i][0])**2 + (df['weight'] - centroids[1][1])**2)
    )
  centroid_distance = ['jarak_dari_{}'.format(i) for i in centroids.keys()]
  df['terdekat'] = df.loc[:, centroid_distance].idxmin(axis = 1)
  df['terdekat'] = df['terdekat'].map(lambda x: int(x.lstrip('jarak_dari_')))
  df['warna'] = df['terdekat'].map(lambda x: colmap[x])
  return df

df = assignment(df, centroids)

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['height'],df['weight'], color = df['warna'], alpha = 0.5, edgecolors='k')
colmap = {1: 'r', 2: 'g', 3:'b'}
for i in centroids.keys():
  plt.scatter(*centroids[i], color = colmap[i])
plt.xlim(140,200)
plt.ylim(20,140)
plt.show()

"""Update Stage"""

import copy

old_centroids = copy.deepcopy(centroids)

def update(k):
    for i in centroids.keys():
        centroids[i][0] = np.mean(df[df['terdekat'] == i]['height'])
        centroids[i][1] = np.mean(df[df['terdekat'] == i]['weight'])
    return k

centroids = update(centroids)

fig = plt.figure(figsize=(5,5))
ax = plt.axes()
plt.scatter(df['height'], df['weight'], color=df['warna'], alpha=0.5, edgecolor='k')
for i in centroids.keys():
    plt.scatter(*centroids[i], color=colmap[i])
plt.xlim(140, 200)
plt.ylim(20, 140)
for i in old_centroids.keys():
    old_x = old_centroids[i][0]
    old_y = old_centroids[i][1]
    dx = (centroids[i][0] - old_centroids[i][0]) * 0.75
    dy = (centroids[i][1] - old_centroids[i][1]) * 0.75
    ax.arrow(old_x, old_y, dx, dy, head_width=2, head_length=3, fc=colmap[i], ec=colmap[i])
plt.show()

"""Repeat Assignment"""

df = assignment(df, centroids)

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['height'],df['weight'], color = df['warna'], alpha = 0.5, edgecolors='k')
colmap = {1: 'r', 2: 'g', 3:'b'}
for i in centroids.keys():
  plt.scatter(*centroids[i], color = colmap[i])
plt.xlim(140,200)
plt.ylim(20,140)
plt.show()

"""Continue until all assigned categories don't change anymore"""

while True:
  closest_centroids = df['terdekat'].copy(deep=True)
  centroids = update(centroids)
  df = assignment(df, centroids)
  if closest_centroids.equals(df['terdekat']):
    break

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['height'],df['weight'], color = df['warna'], alpha = 0.5, edgecolors='k')
colmap = {1: 'r', 2: 'g', 3:'b'}
for i in centroids.keys():
  plt.scatter(*centroids[i], color = colmap[i])
plt.xlim(140,200)
plt.ylim(20,140)
plt.show()